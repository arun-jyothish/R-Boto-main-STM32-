
Rboto-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bcc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000074  08004f74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004f74  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edd9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e78  00000000  00000000  0002ee7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169e8  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec3c  00000000  00000000  000490f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095314  00000000  00000000  00057d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed048  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000ed098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004d48 	.word	0x08004d48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08004d48 	.word	0x08004d48

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]

  if ( GPIO_Pin == B1_INT_Pin )
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f8:	d10c      	bne.n	8000514 <HAL_GPIO_EXTI_Callback+0x2c>
  {
	 if ( state < 3 )
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_GPIO_EXTI_Callback+0x38>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	dc05      	bgt.n	800050e <HAL_GPIO_EXTI_Callback+0x26>
		state ++;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_GPIO_EXTI_Callback+0x38>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <HAL_GPIO_EXTI_Callback+0x38>)
 800050a:	6013      	str	r3, [r2, #0]
	 else
		state = 0;
  }
}
 800050c:	e002      	b.n	8000514 <HAL_GPIO_EXTI_Callback+0x2c>
		state = 0;
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_GPIO_EXTI_Callback+0x38>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000340 	.word	0x20000340

08000524 <leg_sweep>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void leg_sweep(  TIM_HandleTypeDef htim_ , uint32_t channel_ ){
 8000524:	b084      	sub	sp, #16
 8000526:	b480      	push	{r7}
 8000528:	b085      	sub	sp, #20
 800052a:	af00      	add	r7, sp, #0
 800052c:	f107 0c18 	add.w	ip, r7, #24
 8000530:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int i = 85 ;
 8000534:	2355      	movs	r3, #85	; 0x55
 8000536:	60fb      	str	r3, [r7, #12]
	int max  = 125 ;
 8000538:	237d      	movs	r3, #125	; 0x7d
 800053a:	60bb      	str	r3, [r7, #8]
	int min  = 25 ;
 800053c:	2319      	movs	r3, #25
 800053e:	607b      	str	r3, [r7, #4]
		htim_.Instance->CCR1 = i ;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
		htim_.Instance->CCR1 = i ;
		i--;
	}
	*/

}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	b004      	add	sp, #16
 8000552:	4770      	bx	lr

08000554 <main>:



int main(void)
{
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	b0a1      	sub	sp, #132	; 0x84
 8000558:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 ffe5 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f90d 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fc0f 	bl	8000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000566:	f000 fbd7 	bl	8000d18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800056a:	f000 fbab 	bl	8000cc4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800056e:	f000 fb19 	bl	8000ba4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000572:	f000 f9c1 	bl	80008f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000576:	f000 fa99 	bl	8000aac <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800057a:	f000 fb79 	bl	8000c70 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800057e:	f000 f969 	bl	8000854 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000582:	f000 fa3b 	bl	80009fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start ( &htim1 , TIM_CHANNEL_4 );
 8000586:	210c      	movs	r1, #12
 8000588:	486c      	ldr	r0, [pc, #432]	; (800073c <main+0x1e8>)
 800058a:	f002 fe0b 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start ( &htim2 , TIM_CHANNEL_1 );
 800058e:	2100      	movs	r1, #0
 8000590:	486b      	ldr	r0, [pc, #428]	; (8000740 <main+0x1ec>)
 8000592:	f002 fe07 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start ( &htim3 , TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3 | TIM_CHANNEL_4);
 8000596:	210c      	movs	r1, #12
 8000598:	486a      	ldr	r0, [pc, #424]	; (8000744 <main+0x1f0>)
 800059a:	f002 fe03 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start ( &htim4 , TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3 | TIM_CHANNEL_4);
 800059e:	210c      	movs	r1, #12
 80005a0:	4869      	ldr	r0, [pc, #420]	; (8000748 <main+0x1f4>)
 80005a2:	f002 fdff 	bl	80031a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t msg1[] = " hello from stm32 \r\n";
 80005a6:	4b69      	ldr	r3, [pc, #420]	; (800074c <main+0x1f8>)
 80005a8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b6:	6020      	str	r0, [r4, #0]
 80005b8:	3404      	adds	r4, #4
 80005ba:	7021      	strb	r1, [r4, #0]
  uint8_t msg2[] = " hey jyothu\r\n";
 80005bc:	4b64      	ldr	r3, [pc, #400]	; (8000750 <main+0x1fc>)
 80005be:	f107 0414 	add.w	r4, r7, #20
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	c407      	stmia	r4!, {r0, r1, r2}
 80005c6:	8023      	strh	r3, [r4, #0]
  uint8_t mode[8] = "NULL";
 80005c8:	4a62      	ldr	r2, [pc, #392]	; (8000754 <main+0x200>)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d2:	6018      	str	r0, [r3, #0]
 80005d4:	3304      	adds	r3, #4
 80005d6:	7019      	strb	r1, [r3, #0]
 80005d8:	f107 0311 	add.w	r3, r7, #17
 80005dc:	2200      	movs	r2, #0
 80005de:	801a      	strh	r2, [r3, #0]
 80005e0:	709a      	strb	r2, [r3, #2]

  while (1)
  {


	 switch ( state ){
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <main+0x204>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d86c      	bhi.n	80006c4 <main+0x170>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <main+0x9c>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800062d 	.word	0x0800062d
 80005f8:	08000659 	.word	0x08000659
 80005fc:	0800068b 	.word	0x0800068b

		case 0:{
					HAL_GPIO_WritePin ( status_led_GPIO_Port, status_led_Pin , GPIO_PIN_SET );
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	4855      	ldr	r0, [pc, #340]	; (800075c <main+0x208>)
 8000606:	f002 f899 	bl	800273c <HAL_GPIO_WritePin>
					htim2.Instance->CCR1 = 50 ;
 800060a:	4b4d      	ldr	r3, [pc, #308]	; (8000740 <main+0x1ec>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2232      	movs	r2, #50	; 0x32
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
					htim3.Instance->CCR4 = 90 ;
 8000612:	4b4c      	ldr	r3, [pc, #304]	; (8000744 <main+0x1f0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	225a      	movs	r2, #90	; 0x5a
 8000618:	641a      	str	r2, [r3, #64]	; 0x40
					strcpy(mode,"MODE0");
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4a50      	ldr	r2, [pc, #320]	; (8000760 <main+0x20c>)
 8000620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000624:	6018      	str	r0, [r3, #0]
 8000626:	3304      	adds	r3, #4
 8000628:	8019      	strh	r1, [r3, #0]
					break;
 800062a:	e04b      	b.n	80006c4 <main+0x170>

				 }
		case 1:{
					HAL_GPIO_WritePin ( status_led_GPIO_Port, status_led_Pin , GPIO_PIN_RESET );
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	484a      	ldr	r0, [pc, #296]	; (800075c <main+0x208>)
 8000632:	f002 f883 	bl	800273c <HAL_GPIO_WritePin>
					htim2.Instance->CCR1 = 100 ;
 8000636:	4b42      	ldr	r3, [pc, #264]	; (8000740 <main+0x1ec>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2264      	movs	r2, #100	; 0x64
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
					htim3.Instance->CCR4 = 110 ;
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <main+0x1f0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	226e      	movs	r2, #110	; 0x6e
 8000644:	641a      	str	r2, [r3, #64]	; 0x40
					strcpy(mode,"MODE1");
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4a46      	ldr	r2, [pc, #280]	; (8000764 <main+0x210>)
 800064c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000650:	6018      	str	r0, [r3, #0]
 8000652:	3304      	adds	r3, #4
 8000654:	8019      	strh	r1, [r3, #0]
					break;
 8000656:	e035      	b.n	80006c4 <main+0x170>

				 }
		case 2:{
					htim2.Instance->CCR1 = 200 ;
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <main+0x1ec>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	22c8      	movs	r2, #200	; 0xc8
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
					htim3.Instance->CCR4 = 170 ;
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <main+0x1f0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	22aa      	movs	r2, #170	; 0xaa
 8000666:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_GPIO_TogglePin( status_led_GPIO_Port, status_led_Pin  );
 8000668:	2101      	movs	r1, #1
 800066a:	483c      	ldr	r0, [pc, #240]	; (800075c <main+0x208>)
 800066c:	f002 f87f 	bl	800276e <HAL_GPIO_TogglePin>
					HAL_Delay(400);
 8000670:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000674:	f000 ffca 	bl	800160c <HAL_Delay>
					strcpy(mode,"MODE2");
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <main+0x214>)
 800067e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000682:	6018      	str	r0, [r3, #0]
 8000684:	3304      	adds	r3, #4
 8000686:	8019      	strh	r1, [r3, #0]
					break;
 8000688:	e01c      	b.n	80006c4 <main+0x170>
				 }
		case 3:{
					strcpy(mode,"MODE3");
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4a37      	ldr	r2, [pc, #220]	; (800076c <main+0x218>)
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	6018      	str	r0, [r3, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	8019      	strh	r1, [r3, #0]
					leg_sweep( htim2, TIM_CHANNEL_1 );
 800069a:	4e29      	ldr	r6, [pc, #164]	; (8000740 <main+0x1ec>)
 800069c:	2300      	movs	r3, #0
 800069e:	930e      	str	r3, [sp, #56]	; 0x38
 80006a0:	466d      	mov	r5, sp
 80006a2:	f106 0410 	add.w	r4, r6, #16
 80006a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80006ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006be:	f7ff ff31 	bl	8000524 <leg_sweep>
					htim3.Instance->CCR4 = 210 ;
					HAL_GPIO_TogglePin( status_led_GPIO_Port, status_led_Pin  );
					HAL_UART_Transmit( &huart1 , msg2 , strlen(msg2), 10 );
					HAL_Delay(1000);
					*/
					break;
 80006c2:	bf00      	nop
				 }
	 }

					 uint8_t rx_buf[10];
					HAL_UART_Receive( &huart1 , rx_buf , sizeof(rx_buf), 600 );
 80006c4:	4639      	mov	r1, r7
 80006c6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80006ca:	220a      	movs	r2, #10
 80006cc:	4828      	ldr	r0, [pc, #160]	; (8000770 <main+0x21c>)
 80006ce:	f003 faac 	bl	8003c2a <HAL_UART_Receive>
					int val = atoi(rx_buf);
 80006d2:	463b      	mov	r3, r7
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fa75 	bl	8004bc4 <atoi>
 80006da:	63f8      	str	r0, [r7, #60]	; 0x3c

					HAL_UART_Transmit( &huart1 , "rx:", 4 , 10 );
 80006dc:	230a      	movs	r3, #10
 80006de:	2204      	movs	r2, #4
 80006e0:	4924      	ldr	r1, [pc, #144]	; (8000774 <main+0x220>)
 80006e2:	4823      	ldr	r0, [pc, #140]	; (8000770 <main+0x21c>)
 80006e4:	f003 fa0f 	bl	8003b06 <HAL_UART_Transmit>
					HAL_UART_Transmit( &huart1 , rx_buf , strlen( rx_buf ), 10 );
 80006e8:	463b      	mov	r3, r7
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd72 	bl	80001d4 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4639      	mov	r1, r7
 80006f6:	230a      	movs	r3, #10
 80006f8:	481d      	ldr	r0, [pc, #116]	; (8000770 <main+0x21c>)
 80006fa:	f003 fa04 	bl	8003b06 <HAL_UART_Transmit>
					HAL_UART_Transmit( &huart1 , "\r\n", 2 , 10 );
 80006fe:	230a      	movs	r3, #10
 8000700:	2202      	movs	r2, #2
 8000702:	491d      	ldr	r1, [pc, #116]	; (8000778 <main+0x224>)
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <main+0x21c>)
 8000706:	f003 f9fe 	bl	8003b06 <HAL_UART_Transmit>
					HAL_UART_Transmit( &huart1 , mode, strlen(mode), 10 );
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd60 	bl	80001d4 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	230a      	movs	r3, #10
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <main+0x21c>)
 8000720:	f003 f9f1 	bl	8003b06 <HAL_UART_Transmit>
					HAL_UART_Transmit( &huart1 , "\r\n", 2 , 10 );
 8000724:	230a      	movs	r3, #10
 8000726:	2202      	movs	r2, #2
 8000728:	4913      	ldr	r1, [pc, #76]	; (8000778 <main+0x224>)
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <main+0x21c>)
 800072c:	f003 f9eb 	bl	8003b06 <HAL_UART_Transmit>

	 HAL_Delay(500);
 8000730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000734:	f000 ff6a 	bl	800160c <HAL_Delay>
  {
 8000738:	e753      	b.n	80005e2 <main+0x8e>
 800073a:	bf00      	nop
 800073c:	200000d8 	.word	0x200000d8
 8000740:	20000120 	.word	0x20000120
 8000744:	20000168 	.word	0x20000168
 8000748:	200001b0 	.word	0x200001b0
 800074c:	08004d88 	.word	0x08004d88
 8000750:	08004da0 	.word	0x08004da0
 8000754:	08004db0 	.word	0x08004db0
 8000758:	20000340 	.word	0x20000340
 800075c:	40020000 	.word	0x40020000
 8000760:	08004d60 	.word	0x08004d60
 8000764:	08004d68 	.word	0x08004d68
 8000768:	08004d70 	.word	0x08004d70
 800076c:	08004d78 	.word	0x08004d78
 8000770:	200001f8 	.word	0x200001f8
 8000774:	08004d80 	.word	0x08004d80
 8000778:	08004d84 	.word	0x08004d84

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fa48 	bl	8004c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd4>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f001 ffe4 	bl	80027d4 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000812:	f000 fb5f 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fa46 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800083e:	f000 fb49 	bl	8000ed4 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0x98>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b6:	f000 fecd 	bl	8001654 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fb08 	bl	8000ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x98>)
 80008d6:	f000 ff01 	bl	80016dc <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 faf8 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000090 	.word	0x20000090
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b092      	sub	sp, #72	; 0x48
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f004 f97c 	bl	8004c20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000928:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_TIM1_Init+0xfc>)
 800092a:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <MX_TIM1_Init+0x100>)
 800092c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <MX_TIM1_Init+0xfc>)
 8000930:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000934:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_TIM1_Init+0xfc>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_TIM1_Init+0xfc>)
 800093e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_TIM1_Init+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_TIM1_Init+0xfc>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_TIM1_Init+0xfc>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000956:	4827      	ldr	r0, [pc, #156]	; (80009f4 <MX_TIM1_Init+0xfc>)
 8000958:	f002 fbd4 	bl	8003104 <HAL_TIM_PWM_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fab7 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000972:	4619      	mov	r1, r3
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <MX_TIM1_Init+0xfc>)
 8000976:	f002 ffb9 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 faa8 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000984:	2360      	movs	r3, #96	; 0x60
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	220c      	movs	r2, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_TIM1_Init+0xfc>)
 80009a6:	f002 fcad 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b0:	f000 fa90 	bl	8000ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM1_Init+0xfc>)
 80009d8:	f002 fff6 	bl	80039c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80009e2:	f000 fa77 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM1_Init+0xfc>)
 80009e8:	f000 fb48 	bl	800107c <HAL_TIM_MspPostInit>

}
 80009ec:	bf00      	nop
 80009ee:	3748      	adds	r7, #72	; 0x48
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000d8 	.word	0x200000d8
 80009f8:	40010000 	.word	0x40010000

080009fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 210;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a28:	22d2      	movs	r2, #210	; 0xd2
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a34:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a48:	f002 fb5c 	bl	8003104 <HAL_TIM_PWM_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a52:	f000 fa3f 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	4619      	mov	r1, r3
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a66:	f002 ff41 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a70:	f000 fa30 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a74:	2360      	movs	r3, #96	; 0x60
 8000a76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a8c:	f002 fc3a 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a96:	f000 fa1d 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a9a:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <MX_TIM2_Init+0xac>)
 8000a9c:	f000 faee 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000120 	.word	0x20000120

08000aac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000ad0:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <MX_TIM3_Init+0xf4>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000ad6:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000af8:	f002 fb04 	bl	8003104 <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b02:	f000 f9e7 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4619      	mov	r1, r3
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000b16:	f002 fee9 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b20:	f000 f9d8 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b24:	2360      	movs	r3, #96	; 0x60
 8000b26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000b3c:	f002 fbe2 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b46:	f000 f9c5 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000b52:	f002 fbd7 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b5c:	f000 f9ba 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2208      	movs	r2, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000b68:	f002 fbcc 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000b72:	f000 f9af 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	220c      	movs	r2, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000b7e:	f002 fbc1 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000b88:	f000 f9a4 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM3_Init+0xf0>)
 8000b8e:	f000 fa75 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000168 	.word	0x20000168
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000bc8:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <MX_TIM4_Init+0xc8>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000bce:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000bf0:	f002 fa88 	bl	8003104 <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000bfa:	f000 f96b 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000c0e:	f002 fe6d 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c18:	f000 f95c 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2360      	movs	r3, #96	; 0x60
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000c34:	f002 fb66 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c3e:	f000 f949 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2208      	movs	r2, #8
 8000c46:	4619      	mov	r1, r3
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000c4a:	f002 fb5b 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c54:	f000 f93e 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <MX_TIM4_Init+0xc4>)
 8000c5a:	f000 fa0f 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001b0 	.word	0x200001b0
 8000c6c:	40000800 	.word	0x40000800

08000c70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_USART1_UART_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000ca8:	f002 fee0 	bl	8003a6c <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f000 f90f 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	40011000 	.word	0x40011000

08000cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_USART2_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	f002 feb6 	bl	8003a6c <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f8e5 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000023c 	.word	0x2000023c
 8000d14:	40004400 	.word	0x40004400

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_DMA_Init+0x68>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <MX_DMA_Init+0x68>)
 8000d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_DMA_Init+0x68>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_DMA_Init+0x68>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <MX_DMA_Init+0x68>)
 8000d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_DMA_Init+0x68>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f000 ffb7 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f000 ffd0 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	203a      	movs	r0, #58	; 0x3a
 8000d6c:	f000 ffaf 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d70:	203a      	movs	r0, #58	; 0x3a
 8000d72:	f000 ffc8 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4820      	ldr	r0, [pc, #128]	; (8000e90 <MX_GPIO_Init+0x10c>)
 8000e10:	f001 fc94 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2101      	movs	r1, #1
 8000e18:	481e      	ldr	r0, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x110>)
 8000e1a:	f001 fc8f 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_INT_Pin */
  GPIO_InitStruct.Pin = B1_INT_Pin;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_INT_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4816      	ldr	r0, [pc, #88]	; (8000e90 <MX_GPIO_Init+0x10c>)
 8000e36:	f001 fafd 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_USR_Pin */
  GPIO_InitStruct.Pin = LED_USR_Pin;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_USR_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <MX_GPIO_Init+0x10c>)
 8000e52:	f001 faef 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : status_led_Pin */
  GPIO_InitStruct.Pin = status_led_Pin;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(status_led_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_GPIO_Init+0x110>)
 8000e6e:	f001 fae1 	bl	8002434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2028      	movs	r0, #40	; 0x28
 8000e78:	f000 ff29 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7c:	2028      	movs	r0, #40	; 0x28
 8000e7e:	f000 ff42 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_UART_RxCpltCallback>:
	  HAL_Delay(1500);
	  */
	 /* sprintf(uart_tx_buf,"%d", state ); */
}

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart ){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit( &huart1 , uart_tx_buf , strlen(uart_tx_buf) ,10 );
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_UART_RxCpltCallback+0x30>)
 8000ea2:	f7ff f997 	bl	80001d4 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	230a      	movs	r3, #10
 8000eac:	4906      	ldr	r1, [pc, #24]	; (8000ec8 <HAL_UART_RxCpltCallback+0x30>)
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <HAL_UART_RxCpltCallback+0x34>)
 8000eb0:	f002 fe29 	bl	8003b06 <HAL_UART_Transmit>
  HAL_UART_Transmit( &huart1 ,end , sizeof(end) , 10);
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	4905      	ldr	r1, [pc, #20]	; (8000ed0 <HAL_UART_RxCpltCallback+0x38>)
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <HAL_UART_RxCpltCallback+0x34>)
 8000ebc:	f002 fe23 	bl	8003b06 <HAL_UART_Transmit>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000344 	.word	0x20000344
 8000ecc:	200001f8 	.word	0x200001f8
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 feca 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_ADC_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d127      	bne.n	8000fa2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_ADC_MspInit+0x80>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_ADC_MspInit+0x80>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_ADC_MspInit+0x80>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_ADC_MspInit+0x80>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_ADC_MspInit+0x80>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_ADC_MspInit+0x80>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_ADC_MspInit+0x84>)
 8000f9e:	f001 fa49 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a29      	ldr	r2, [pc, #164]	; (800106c <HAL_TIM_PWM_MspInit+0xb4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10e      	bne.n	8000fe8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fe6:	e03a      	b.n	800105e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff0:	d10e      	bne.n	8001010 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
}
 800100e:	e026      	b.n	800105e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_TIM_PWM_MspInit+0xbc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10e      	bne.n	8001038 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	e012      	b.n	800105e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_TIM_PWM_MspInit+0xc0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10d      	bne.n	800105e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_TIM_PWM_MspInit+0xb8>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
}
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40010000 	.word	0x40010000
 8001070:	40023800 	.word	0x40023800
 8001074:	40000400 	.word	0x40000400
 8001078:	40000800 	.word	0x40000800

0800107c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a58      	ldr	r2, [pc, #352]	; (80011fc <HAL_TIM_MspPostInit+0x180>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d11f      	bne.n	80010de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b57      	ldr	r3, [pc, #348]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a56      	ldr	r2, [pc, #344]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b54      	ldr	r3, [pc, #336]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	484b      	ldr	r0, [pc, #300]	; (8001204 <HAL_TIM_MspPostInit+0x188>)
 80010d8:	f001 f9ac 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010dc:	e08a      	b.n	80011f4 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e6:	d11e      	bne.n	8001126 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	4b44      	ldr	r3, [pc, #272]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a43      	ldr	r2, [pc, #268]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001104:	2320      	movs	r3, #32
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4839      	ldr	r0, [pc, #228]	; (8001204 <HAL_TIM_MspPostInit+0x188>)
 8001120:	f001 f988 	bl	8002434 <HAL_GPIO_Init>
}
 8001124:	e066      	b.n	80011f4 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM3)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_TIM_MspPostInit+0x18c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d13d      	bne.n	80011ac <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001178:	2302      	movs	r3, #2
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4820      	ldr	r0, [pc, #128]	; (8001204 <HAL_TIM_MspPostInit+0x188>)
 8001184:	f001 f956 	bl	8002434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001188:	f44f 7350 	mov.w	r3, #832	; 0x340
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800119a:	2302      	movs	r3, #2
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4819      	ldr	r0, [pc, #100]	; (800120c <HAL_TIM_MspPostInit+0x190>)
 80011a6:	f001 f945 	bl	8002434 <HAL_GPIO_Init>
}
 80011aa:	e023      	b.n	80011f4 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM4)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_TIM_MspPostInit+0x194>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d11e      	bne.n	80011f4 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_MspPostInit+0x184>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80011d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_TIM_MspPostInit+0x198>)
 80011f0:	f001 f920 	bl	8002434 <HAL_GPIO_Init>
}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	; 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010000 	.word	0x40010000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	40000400 	.word	0x40000400
 800120c:	40020800 	.word	0x40020800
 8001210:	40000800 	.word	0x40000800
 8001214:	40020400 	.word	0x40020400

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a69      	ldr	r2, [pc, #420]	; (80013dc <HAL_UART_MspInit+0x1c4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d164      	bne.n	8001304 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001272:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001284:	2307      	movs	r3, #7
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4855      	ldr	r0, [pc, #340]	; (80013e4 <HAL_UART_MspInit+0x1cc>)
 8001290:	f001 f8d0 	bl	8002434 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 8001296:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_UART_MspInit+0x1d4>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 800129c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b6:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012d6:	4844      	ldr	r0, [pc, #272]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012d8:	f000 fd30 	bl	8001d3c <HAL_DMA_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80012e2:	f7ff fdf7 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
 80012ec:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2025      	movs	r0, #37	; 0x25
 80012f8:	f000 fce9 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fc:	2025      	movs	r0, #37	; 0x25
 80012fe:	f000 fd02 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	e066      	b.n	80013d2 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a39      	ldr	r2, [pc, #228]	; (80013f0 <HAL_UART_MspInit+0x1d8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d161      	bne.n	80013d2 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_GPS_Pin|USART_RX_GPS_Pin;
 8001346:	230c      	movs	r3, #12
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001356:	2307      	movs	r3, #7
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4820      	ldr	r0, [pc, #128]	; (80013e4 <HAL_UART_MspInit+0x1cc>)
 8001362:	f001 f867 	bl	8002434 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_UART_MspInit+0x1e0>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 800136e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001372:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013a6:	4813      	ldr	r0, [pc, #76]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 80013a8:	f000 fcc8 	bl	8001d3c <HAL_DMA_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80013b2:	f7ff fd8f 	bl	8000ed4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_UART_MspInit+0x1dc>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2026      	movs	r0, #38	; 0x26
 80013c8:	f000 fc81 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013cc:	2026      	movs	r0, #38	; 0x26
 80013ce:	f000 fc9a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	20000280 	.word	0x20000280
 80013ec:	40026440 	.word	0x40026440
 80013f0:	40004400 	.word	0x40004400
 80013f4:	200002e0 	.word	0x200002e0
 80013f8:	40026088 	.word	0x40026088

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8c0 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <DMA1_Stream5_IRQHandler+0x10>)
 8001456:	f000 fdb1 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200002e0 	.word	0x200002e0

08001464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <USART1_IRQHandler+0x10>)
 800146a:	f002 fc81 	bl	8003d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001f8 	.word	0x200001f8

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f002 fc77 	bl	8003d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000023c 	.word	0x2000023c

0800148c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_INT_Pin);
 8001490:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001494:	f001 f986 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <DMA2_Stream2_IRQHandler+0x10>)
 80014a2:	f000 fd8b 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000280 	.word	0x20000280

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ffd7 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f003 fb69 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f825 	bl	8000554 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800150c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001518:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 800151c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001520:	2000035c 	.word	0x2000035c

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 fbb1 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fcc0 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fbc9 	bl	8001d22 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a8:	f000 fb91 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000004 	.word	0x20000004
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	2000000c 	.word	0x2000000c
 80015f0:	20000358 	.word	0x20000358

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000358 	.word	0x20000358

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000000c 	.word	0x2000000c

08001654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e033      	b.n	80016d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fc5c 	bl	8000f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f93a 	bl	8001920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	e001      	b.n	80016c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e105      	b.n	8001904 <HAL_ADC_ConfigChannel+0x228>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d925      	bls.n	8001754 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1e      	subs	r3, #30
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68d9      	ldr	r1, [r3, #12]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	4603      	mov	r3, r0
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4403      	add	r3, r0
 8001746:	3b1e      	subs	r3, #30
 8001748:	409a      	lsls	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e022      	b.n	800179a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	2207      	movs	r2, #7
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	400a      	ands	r2, r1
 8001776:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6919      	ldr	r1, [r3, #16]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	4603      	mov	r3, r0
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4403      	add	r3, r0
 8001790:	409a      	lsls	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d824      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b05      	subs	r3, #5
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b05      	subs	r3, #5
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	e04c      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d824      	bhi.n	800183e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b23      	subs	r3, #35	; 0x23
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b23      	subs	r3, #35	; 0x23
 8001830:	fa00 f203 	lsl.w	r2, r0, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	e023      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b41      	subs	r3, #65	; 0x41
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b41      	subs	r3, #65	; 0x41
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_ADC_ConfigChannel+0x234>)
 8001888:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_ADC_ConfigChannel+0x238>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d109      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d105      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_ADC_ConfigChannel+0x238>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d123      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x1e6>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b11      	cmp	r3, #17
 80018c0:	d11b      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d111      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_ADC_ConfigChannel+0x23c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_ADC_ConfigChannel+0x240>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	0c9a      	lsrs	r2, r3, #18
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012300 	.word	0x40012300
 8001914:	40012000 	.word	0x40012000
 8001918:	20000004 	.word	0x20000004
 800191c:	431bde83 	.word	0x431bde83

08001920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <ADC_Init+0x1f0>)
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	021a      	lsls	r2, r3, #8
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <ADC_Init+0x1f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d022      	beq.n	80019fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	e00f      	b.n	8001a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0202 	bic.w	r2, r2, #2
 8001a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6899      	ldr	r1, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
 8001a38:	005a      	lsls	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01b      	beq.n	8001a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	3b01      	subs	r3, #1
 8001a78:	035a      	lsls	r2, r3, #13
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	e007      	b.n	8001a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	051a      	lsls	r2, r3, #20
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad6:	025a      	lsls	r2, r3, #9
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	029a      	lsls	r2, r3, #10
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40012300 	.word	0x40012300
 8001b14:	0f000001 	.word	0x0f000001

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fc54 	bl	80015f4 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e099      	b.n	8001e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d78:	e00f      	b.n	8001d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7a:	f7ff fc3b 	bl	80015f4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d908      	bls.n	8001d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e078      	b.n	8001e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e8      	bne.n	8001d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_DMA_Init+0x158>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d117      	bne.n	8001e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fa7b 	bl	800233c <DMA_CheckFifoParam>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e016      	b.n	8001e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa32 	bl	80022d0 <DMA_CalcBaseAndBitshift>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	f010803f 	.word	0xf010803f

08001e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea6:	f7ff fba5 	bl	80015f4 <HAL_GetTick>
 8001eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e052      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0216 	bic.w	r2, r2, #22
 8001ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_DMA_Abort+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0208 	bic.w	r2, r2, #8
 8001f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	e013      	b.n	8001f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1c:	f7ff fb6a 	bl	80015f4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d90c      	bls.n	8001f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e015      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1e4      	bne.n	8001f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	223f      	movs	r2, #63	; 0x3f
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00c      	b.n	8001fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc8:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <HAL_DMA_IRQHandler+0x248>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a8e      	ldr	r2, [pc, #568]	; (8002208 <HAL_DMA_IRQHandler+0x24c>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a9b      	lsrs	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01a      	beq.n	8002028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0204 	bic.w	r2, r2, #4
 800200e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	2208      	movs	r2, #8
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	2204      	movs	r2, #4
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	2204      	movs	r2, #4
 8002082:	409a      	lsls	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2210      	movs	r2, #16
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d043      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d03c      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	2210      	movs	r2, #16
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d018      	beq.n	80020fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d024      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
 80020ea:	e01f      	b.n	800212c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e016      	b.n	800212c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0208 	bic.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	2220      	movs	r2, #32
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 808f 	beq.w	800225c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8087 	beq.w	800225c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2220      	movs	r2, #32
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	d136      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0216 	bic.w	r2, r2, #22
 8002174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <HAL_DMA_IRQHandler+0x1da>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0208 	bic.w	r2, r2, #8
 80021a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	223f      	movs	r2, #63	; 0x3f
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d07e      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
        }
        return;
 80021d2:	e079      	b.n	80022c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01d      	beq.n	800221e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10d      	bne.n	800220c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d031      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e02c      	b.n	800225c <HAL_DMA_IRQHandler+0x2a0>
 8002202:	bf00      	nop
 8002204:	20000004 	.word	0x20000004
 8002208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e01e      	b.n	800225c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0210 	bic.w	r2, r2, #16
 800223a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d032      	beq.n	80022ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2205      	movs	r2, #5
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3301      	adds	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	d307      	bcc.n	80022a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f2      	bne.n	8002288 <HAL_DMA_IRQHandler+0x2cc>
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
 80022c6:	e000      	b.n	80022ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80022c8:	bf00      	nop
    }
  }
}
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3b10      	subs	r3, #16
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <DMA_CalcBaseAndBitshift+0x64>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <DMA_CalcBaseAndBitshift+0x68>)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d909      	bls.n	8002312 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	1d1a      	adds	r2, r3, #4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58
 8002310:	e007      	b.n	8002322 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	aaaaaaab 	.word	0xaaaaaaab
 8002338:	08004de4 	.word	0x08004de4

0800233c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d856      	bhi.n	800240a <DMA_CheckFifoParam+0xce>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <DMA_CheckFifoParam+0x28>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002375 	.word	0x08002375
 8002368:	08002387 	.word	0x08002387
 800236c:	08002375 	.word	0x08002375
 8002370:	0800240b 	.word	0x0800240b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d046      	beq.n	800240e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002384:	e043      	b.n	800240e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238e:	d140      	bne.n	8002412 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002394:	e03d      	b.n	8002412 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239e:	d121      	bne.n	80023e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d837      	bhi.n	8002416 <DMA_CheckFifoParam+0xda>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <DMA_CheckFifoParam+0x70>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023bd 	.word	0x080023bd
 80023b0:	080023c3 	.word	0x080023c3
 80023b4:	080023bd 	.word	0x080023bd
 80023b8:	080023d5 	.word	0x080023d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e030      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d025      	beq.n	800241a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d2:	e022      	b.n	800241a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023dc:	d11f      	bne.n	800241e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023e2:	e01c      	b.n	800241e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d903      	bls.n	80023f2 <DMA_CheckFifoParam+0xb6>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d003      	beq.n	80023f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f0:	e018      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      break;
 80023f6:	e015      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e00b      	b.n	8002422 <DMA_CheckFifoParam+0xe6>
      break;
 800240a:	bf00      	nop
 800240c:	e00a      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e008      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e006      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e004      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e002      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;   
 800241e:	bf00      	nop
 8002420:	e000      	b.n	8002424 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
    }
  } 
  
  return status; 
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e159      	b.n	8002704 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 8148 	bne.w	80026fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d005      	beq.n	8002486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	2b02      	cmp	r3, #2
 8002484:	d130      	bne.n	80024e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a2 	beq.w	80026fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_GPIO_Init+0x2e8>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_GPIO_Init+0x2e8>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b54      	ldr	r3, [pc, #336]	; (800271c <HAL_GPIO_Init+0x2e8>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d6:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_GPIO_Init+0x2ec>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a49      	ldr	r2, [pc, #292]	; (8002724 <HAL_GPIO_Init+0x2f0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x202>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_GPIO_Init+0x2f4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1fe>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a47      	ldr	r2, [pc, #284]	; (800272c <HAL_GPIO_Init+0x2f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1fa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_GPIO_Init+0x2fc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1f6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_GPIO_Init+0x300>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1f2>
 8002622:	2304      	movs	r3, #4
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002626:	2307      	movs	r3, #7
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x204>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x204>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002636:	2300      	movs	r3, #0
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002648:	4935      	ldr	r1, [pc, #212]	; (8002720 <HAL_GPIO_Init+0x2ec>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_GPIO_Init+0x304>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <HAL_GPIO_Init+0x304>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_GPIO_Init+0x304>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ce:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f8:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_GPIO_Init+0x304>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f67f aea2 	bls.w	8002450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002780:	887a      	ldrh	r2, [r7, #2]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	041a      	lsls	r2, r3, #16
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43d9      	mvns	r1, r3
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	400b      	ands	r3, r1
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe90 	bl	80004e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e267      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d075      	beq.n	80028de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f2:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d00c      	beq.n	8002818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fe:	4b85      	ldr	r3, [pc, #532]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d112      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05b      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d157      	bne.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e242      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x74>
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6f      	ldr	r2, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6c      	ldr	r2, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 800286c:	4b69      	ldr	r3, [pc, #420]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a68      	ldr	r2, [pc, #416]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe feb2 	bl	80015f4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe feae 	bl	80015f4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e207      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xc0>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fe9e 	bl	80015f4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fe9a 	bl	80015f4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1f3      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b44      	ldr	r3, [pc, #272]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c7      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4937      	ldr	r1, [pc, #220]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <HAL_RCC_OscConfig+0x244>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fe53 	bl	80015f4 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fe4f 	bl	80015f4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a8      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4925      	ldr	r1, [pc, #148]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_OscConfig+0x244>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fe32 	bl	80015f4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fe2e 	bl	80015f4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e187      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d036      	beq.n	8002a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_RCC_OscConfig+0x248>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fe12 	bl	80015f4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fe0e 	bl	80015f4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e167      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x200>
 80029f2:	e01b      	b.n	8002a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_OscConfig+0x248>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7fe fdfb 	bl	80015f4 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00e      	b.n	8002a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe fdf7 	bl	80015f4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d907      	bls.n	8002a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e150      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470000 	.word	0x42470000
 8002a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ea      	bne.n	8002a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8097 	beq.w	8002b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a7c      	ldr	r2, [pc, #496]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a73      	ldr	r2, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fdb7 	bl	80015f4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe fdb3 	bl	80015f4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e10c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x2ea>
 8002ab0:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a63      	ldr	r2, [pc, #396]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0x324>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x30c>
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a5e      	ldr	r2, [pc, #376]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0x324>
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	4b55      	ldr	r3, [pc, #340]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a54      	ldr	r2, [pc, #336]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fd78 	bl	80015f4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fd74 	bl	80015f4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0cb      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ee      	beq.n	8002b08 <HAL_RCC_OscConfig+0x334>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fd62 	bl	80015f4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe fd5e 	bl	80015f4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0b5      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a1 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d05c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d141      	bne.n	8002c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fd32 	bl	80015f4 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fd2e 	bl	80015f4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e087      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	491b      	ldr	r1, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fd07 	bl	80015f4 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe fd03 	bl	80015f4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e05c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x416>
 8002c08:	e054      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fcf0 	bl	80015f4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fcec 	bl	80015f4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e045      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x444>
 8002c36:	e03d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e038      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x4ec>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d028      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d121      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d111      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0cc      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90c      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	494d      	ldr	r1, [pc, #308]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d044      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d119      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e07f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e067      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4934      	ldr	r1, [pc, #208]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fc1e 	bl	80015f4 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fc1a 	bl	80015f4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20c      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e032      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4916      	ldr	r1, [pc, #88]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 f821 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	490a      	ldr	r1, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fb7e 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08004dcc 	.word	0x08004dcc
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b094      	sub	sp, #80	; 0x50
 8002e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea8:	4b79      	ldr	r3, [pc, #484]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	f200 80e1 	bhi.w	800307c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec2:	e0db      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ec8:	e0db      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ece:	e0d8      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	2200      	movs	r2, #0
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f02:	4622      	mov	r2, r4
 8002f04:	462b      	mov	r3, r5
 8002f06:	f04f 0000 	mov.w	r0, #0
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	0159      	lsls	r1, r3, #5
 8002f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f14:	0150      	lsls	r0, r2, #5
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	1a51      	subs	r1, r2, r1
 8002f1e:	6139      	str	r1, [r7, #16]
 8002f20:	4629      	mov	r1, r5
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f34:	4659      	mov	r1, fp
 8002f36:	018b      	lsls	r3, r1, #6
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3e:	4651      	mov	r1, sl
 8002f40:	018a      	lsls	r2, r1, #6
 8002f42:	4651      	mov	r1, sl
 8002f44:	ebb2 0801 	subs.w	r8, r2, r1
 8002f48:	4659      	mov	r1, fp
 8002f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	eb49 0303 	adc.w	r3, r9, r3
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f82:	4629      	mov	r1, r5
 8002f84:	024b      	lsls	r3, r1, #9
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	024a      	lsls	r2, r1, #9
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f96:	2200      	movs	r2, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa0:	f7fd f920 	bl	80001e4 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fac:	e058      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4611      	mov	r1, r2
 8002fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	f04f 0000 	mov.w	r0, #0
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	0159      	lsls	r1, r3, #5
 8002fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fda:	0150      	lsls	r0, r2, #5
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003000:	ebb2 040a 	subs.w	r4, r2, sl
 8003004:	eb63 050b 	sbc.w	r5, r3, fp
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	00eb      	lsls	r3, r5, #3
 8003012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003016:	00e2      	lsls	r2, r4, #3
 8003018:	4614      	mov	r4, r2
 800301a:	461d      	mov	r5, r3
 800301c:	4643      	mov	r3, r8
 800301e:	18e3      	adds	r3, r4, r3
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	464b      	mov	r3, r9
 8003024:	eb45 0303 	adc.w	r3, r5, r3
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003036:	4629      	mov	r1, r5
 8003038:	028b      	lsls	r3, r1, #10
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003040:	4621      	mov	r1, r4
 8003042:	028a      	lsls	r2, r1, #10
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304a:	2200      	movs	r2, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	61fa      	str	r2, [r7, #28]
 8003050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003054:	f7fd f8c6 	bl	80001e4 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4613      	mov	r3, r2
 800305e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307a:	e002      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetSysClockFreq+0x204>)
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003084:	4618      	mov	r0, r3
 8003086:	3750      	adds	r7, #80	; 0x50
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	00f42400 	.word	0x00f42400
 8003098:	007a1200 	.word	0x007a1200

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b8:	f7ff fff0 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08004ddc 	.word	0x08004ddc

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e0:	f7ff ffdc 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0b5b      	lsrs	r3, r3, #13
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08004ddc 	.word	0x08004ddc

08003104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e041      	b.n	800319a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd ff44 	bl	8000fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f000 f9a0 	bl	8003488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_TIM_PWM_Start+0x24>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e022      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d109      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x3e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e015      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start+0x58>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e008      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e068      	b.n	80032e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0x82>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	e013      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0x92>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	e00b      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d104      	bne.n	8003246 <HAL_TIM_PWM_Start+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003244:	e003      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fb22 	bl	80038a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <HAL_TIM_PWM_Start+0x14c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d107      	bne.n	8003276 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_TIM_PWM_Start+0x14c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d013      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_TIM_PWM_Start+0x150>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_TIM_PWM_Start+0x154>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_TIM_PWM_Start+0x158>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_TIM_PWM_Start+0x15c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d010      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	e007      	b.n	80032e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40014000 	.word	0x40014000

08003304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800331e:	2302      	movs	r3, #2
 8003320:	e0ae      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	f200 809f 	bhi.w	8003470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800336d 	.word	0x0800336d
 800333c:	08003471 	.word	0x08003471
 8003340:	08003471 	.word	0x08003471
 8003344:	08003471 	.word	0x08003471
 8003348:	080033ad 	.word	0x080033ad
 800334c:	08003471 	.word	0x08003471
 8003350:	08003471 	.word	0x08003471
 8003354:	08003471 	.word	0x08003471
 8003358:	080033ef 	.word	0x080033ef
 800335c:	08003471 	.word	0x08003471
 8003360:	08003471 	.word	0x08003471
 8003364:	08003471 	.word	0x08003471
 8003368:	0800342f 	.word	0x0800342f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f908 	bl	8003588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0208 	orr.w	r2, r2, #8
 8003386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6999      	ldr	r1, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]
      break;
 80033aa:	e064      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f94e 	bl	8003654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6999      	ldr	r1, [r3, #24]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	619a      	str	r2, [r3, #24]
      break;
 80033ec:	e043      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f999 	bl	800372c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0208 	orr.w	r2, r2, #8
 8003408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0204 	bic.w	r2, r2, #4
 8003418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
      break;
 800342c:	e023      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f9e3 	bl	8003800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69d9      	ldr	r1, [r3, #28]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	61da      	str	r2, [r3, #28]
      break;
 800346e:	e002      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
      break;
 8003474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <TIM_Base_SetConfig+0xe4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00f      	beq.n	80034c0 <TIM_Base_SetConfig+0x38>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d00b      	beq.n	80034c0 <TIM_Base_SetConfig+0x38>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a31      	ldr	r2, [pc, #196]	; (8003570 <TIM_Base_SetConfig+0xe8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a30      	ldr	r2, [pc, #192]	; (8003574 <TIM_Base_SetConfig+0xec>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <TIM_Base_SetConfig+0xf0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <TIM_Base_SetConfig+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01b      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d017      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <TIM_Base_SetConfig+0xe8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <TIM_Base_SetConfig+0xec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00f      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a20      	ldr	r2, [pc, #128]	; (8003578 <TIM_Base_SetConfig+0xf0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <TIM_Base_SetConfig+0xf4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <TIM_Base_SetConfig+0xf8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0x8a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <TIM_Base_SetConfig+0xfc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d108      	bne.n	8003524 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <TIM_Base_SetConfig+0xe4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40010000 	.word	0x40010000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800

08003588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f023 0201 	bic.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0302 	bic.w	r3, r3, #2
 80035d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <TIM_OC1_SetConfig+0xc8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10c      	bne.n	80035fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0308 	bic.w	r3, r3, #8
 80035ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 0304 	bic.w	r3, r3, #4
 80035fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <TIM_OC1_SetConfig+0xc8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	621a      	str	r2, [r3, #32]
}
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40010000 	.word	0x40010000

08003654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 0210 	bic.w	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0320 	bic.w	r3, r3, #32
 800369e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <TIM_OC2_SetConfig+0xd4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10d      	bne.n	80036d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <TIM_OC2_SetConfig+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d113      	bne.n	8003700 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000

0800372c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <TIM_OC3_SetConfig+0xd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10d      	bne.n	80037a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <TIM_OC3_SetConfig+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d113      	bne.n	80037d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	621a      	str	r2, [r3, #32]
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40010000 	.word	0x40010000

08003800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	031b      	lsls	r3, r3, #12
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <TIM_OC4_SetConfig+0x9c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d109      	bne.n	8003874 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40010000 	.word	0x40010000

080038a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2201      	movs	r2, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e050      	b.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d013      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10c      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4313      	orrs	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40014000 	.word	0x40014000

080039c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e03d      	b.n	8003a60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e03f      	b.n	8003afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fbc0 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fe13 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b08a      	sub	sp, #40	; 0x28
 8003b0a:	af02      	add	r7, sp, #8
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d17c      	bne.n	8003c20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_Transmit+0x2c>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e075      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x3e>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e06e      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fd4b 	bl	80015f4 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x82>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b98:	e02a      	b.n	8003bf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fb91 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e036      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cf      	bne.n	8003b9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fb61 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b08a      	sub	sp, #40	; 0x28
 8003c2e:	af02      	add	r7, sp, #8
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	f040 808c 	bne.w	8003d64 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_UART_Receive+0x2e>
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e084      	b.n	8003d66 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Receive+0x40>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e07d      	b.n	8003d66 <HAL_UART_Receive+0x13c>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2222      	movs	r2, #34	; 0x22
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fcb5 	bl	80015f4 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Receive+0x8a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cc4:	e043      	b.n	8003d4e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2120      	movs	r1, #32
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fafb 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e042      	b.n	8003d66 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e01f      	b.n	8003d40 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d007      	beq.n	8003d1a <HAL_UART_Receive+0xf0>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_UART_Receive+0xfe>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e008      	b.n	8003d3a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1b6      	bne.n	8003cc6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b0ba      	sub	sp, #232	; 0xe8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x66>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fbc9 	bl	8004566 <UART_Receive_IT>
      return;
 8003dd4:	e256      	b.n	8004284 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80de 	beq.w	8003f9c <HAL_UART_IRQHandler+0x22c>
 8003de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80d1 	beq.w	8003f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_UART_IRQHandler+0xae>
 8003e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_UART_IRQHandler+0xd2>
 8003e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_UART_IRQHandler+0xf6>
 8003e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0204 	orr.w	r2, r3, #4
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <HAL_UART_IRQHandler+0x126>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d105      	bne.n	8003e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0208 	orr.w	r2, r3, #8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 81ed 	beq.w	800427a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_UART_IRQHandler+0x14e>
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fb54 	bl	8004566 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_UART_IRQHandler+0x17a>
 8003ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d04f      	beq.n	8003f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fa5c 	bl	80043a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d141      	bne.n	8003f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1d9      	bne.n	8003efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d013      	beq.n	8003f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	4a7d      	ldr	r2, [pc, #500]	; (800414c <HAL_UART_IRQHandler+0x3dc>)
 8003f58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f80a 	bl	8001f78 <HAL_DMA_Abort_IT>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f74:	4610      	mov	r0, r2
 8003f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	e00e      	b.n	8003f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f990 	bl	80042a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	e00a      	b.n	8003f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f98c 	bl	80042a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	e006      	b.n	8003f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f988 	bl	80042a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f96:	e170      	b.n	800427a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	bf00      	nop
    return;
 8003f9a:	e16e      	b.n	800427a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f040 814a 	bne.w	800423a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8143 	beq.w	800423a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 813c 	beq.w	800423a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	f040 80b4 	bne.w	8004150 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8140 	beq.w	800427e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004006:	429a      	cmp	r2, r3
 8004008:	f080 8139 	bcs.w	800427e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004012:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401e:	f000 8088 	beq.w	8004132 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800404e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800405a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1d9      	bne.n	8004022 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800407e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004092:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004096:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800409a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e1      	bne.n	800406e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3314      	adds	r3, #20
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3314      	adds	r3, #20
 80040ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e3      	bne.n	80040aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004102:	f023 0310 	bic.w	r3, r3, #16
 8004106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004114:	65ba      	str	r2, [r7, #88]	; 0x58
 8004116:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800411a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e3      	bne.n	80040f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd feb3 	bl	8001e98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800413a:	b29b      	uxth	r3, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8b6 	bl	80042b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004148:	e099      	b.n	800427e <HAL_UART_IRQHandler+0x50e>
 800414a:	bf00      	nop
 800414c:	0800446f 	.word	0x0800446f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 808b 	beq.w	8004282 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800416c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8086 	beq.w	8004282 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800419a:	647a      	str	r2, [r7, #68]	; 0x44
 800419c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e3      	bne.n	8004176 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	623b      	str	r3, [r7, #32]
   return(result);
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041d2:	633a      	str	r2, [r7, #48]	; 0x30
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e3      	bne.n	80041ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	60fb      	str	r3, [r7, #12]
   return(result);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004218:	61fa      	str	r2, [r7, #28]
 800421a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	69b9      	ldr	r1, [r7, #24]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	617b      	str	r3, [r7, #20]
   return(result);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e3      	bne.n	80041f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800422c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f83e 	bl	80042b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004238:	e023      	b.n	8004282 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_UART_IRQHandler+0x4ea>
 8004246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f91f 	bl	8004496 <UART_Transmit_IT>
    return;
 8004258:	e014      	b.n	8004284 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00e      	beq.n	8004284 <HAL_UART_IRQHandler+0x514>
 8004266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f95f 	bl	8004536 <UART_EndTransmit_IT>
    return;
 8004278:	e004      	b.n	8004284 <HAL_UART_IRQHandler+0x514>
    return;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <HAL_UART_IRQHandler+0x514>
      return;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_UART_IRQHandler+0x514>
      return;
 8004282:	bf00      	nop
  }
}
 8004284:	37e8      	adds	r7, #232	; 0xe8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop

0800428c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b090      	sub	sp, #64	; 0x40
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	e050      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e4:	d04c      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <UART_WaitOnFlagUntilTimeout+0x30>
 80042ec:	f7fd f982 	bl	80015f4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d241      	bcs.n	8004380 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800431c:	637a      	str	r2, [r7, #52]	; 0x34
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	613b      	str	r3, [r7, #16]
   return(result);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004350:	623a      	str	r2, [r7, #32]
 8004352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	69f9      	ldr	r1, [r7, #28]
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	61bb      	str	r3, [r7, #24]
   return(result);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e00f      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	429a      	cmp	r2, r3
 800439c:	d09f      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3740      	adds	r7, #64	; 0x40
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b095      	sub	sp, #84	; 0x54
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d0:	643a      	str	r2, [r7, #64]	; 0x40
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e5      	bne.n	80043b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3314      	adds	r3, #20
 80043ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3314      	adds	r3, #20
 8004402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e5      	bne.n	80043e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	d119      	bne.n	8004454 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f023 0310 	bic.w	r3, r3, #16
 8004436:	647b      	str	r3, [r7, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004440:	61ba      	str	r2, [r7, #24]
 8004442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6979      	ldr	r1, [r7, #20]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	613b      	str	r3, [r7, #16]
   return(result);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004462:	bf00      	nop
 8004464:	3754      	adds	r7, #84	; 0x54
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff ff09 	bl	80042a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b21      	cmp	r3, #33	; 0x21
 80044a8:	d13e      	bne.n	8004528 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d114      	bne.n	80044de <UART_Transmit_IT+0x48>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d110      	bne.n	80044de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	1c9a      	adds	r2, r3, #2
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	621a      	str	r2, [r3, #32]
 80044dc:	e008      	b.n	80044f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6211      	str	r1, [r2, #32]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4619      	mov	r1, r3
 80044fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004512:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004522:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	e000      	b.n	800452a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff fe98 	bl	800428c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b08c      	sub	sp, #48	; 0x30
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b22      	cmp	r3, #34	; 0x22
 8004578:	f040 80ab 	bne.w	80046d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d117      	bne.n	80045b6 <UART_Receive_IT+0x50>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d113      	bne.n	80045b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
 80045b4:	e026      	b.n	8004604 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c8:	d007      	beq.n	80045da <UART_Receive_IT+0x74>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <UART_Receive_IT+0x82>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e008      	b.n	80045fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4619      	mov	r1, r3
 8004612:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004614:	2b00      	cmp	r3, #0
 8004616:	d15a      	bne.n	80046ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0220 	bic.w	r2, r2, #32
 8004626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	2b01      	cmp	r3, #1
 8004656:	d135      	bne.n	80046c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	613b      	str	r3, [r7, #16]
   return(result);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467e:	623a      	str	r2, [r7, #32]
 8004680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	61bb      	str	r3, [r7, #24]
   return(result);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d10a      	bne.n	80046b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fdf9 	bl	80042b4 <HAL_UARTEx_RxEventCallback>
 80046c2:	e002      	b.n	80046ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fc fbe7 	bl	8000e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e002      	b.n	80046d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3730      	adds	r7, #48	; 0x30
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e0:	b0c0      	sub	sp, #256	; 0x100
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	68d9      	ldr	r1, [r3, #12]
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	ea40 0301 	orr.w	r3, r0, r1
 8004704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	431a      	orrs	r2, r3
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004734:	f021 010c 	bic.w	r1, r1, #12
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004742:	430b      	orrs	r3, r1
 8004744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	6999      	ldr	r1, [r3, #24]
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	ea40 0301 	orr.w	r3, r0, r1
 8004762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b8f      	ldr	r3, [pc, #572]	; (80049a8 <UART_SetConfig+0x2cc>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d005      	beq.n	800477c <UART_SetConfig+0xa0>
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b8d      	ldr	r3, [pc, #564]	; (80049ac <UART_SetConfig+0x2d0>)
 8004778:	429a      	cmp	r2, r3
 800477a:	d104      	bne.n	8004786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7fe fcae 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8004780:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004784:	e003      	b.n	800478e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004786:	f7fe fc95 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 800478a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	f040 810c 	bne.w	80049b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047b6:	415b      	adcs	r3, r3
 80047b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047be:	4621      	mov	r1, r4
 80047c0:	eb12 0801 	adds.w	r8, r2, r1
 80047c4:	4629      	mov	r1, r5
 80047c6:	eb43 0901 	adc.w	r9, r3, r1
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047de:	4690      	mov	r8, r2
 80047e0:	4699      	mov	r9, r3
 80047e2:	4623      	mov	r3, r4
 80047e4:	eb18 0303 	adds.w	r3, r8, r3
 80047e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ec:	462b      	mov	r3, r5
 80047ee:	eb49 0303 	adc.w	r3, r9, r3
 80047f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004802:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800480a:	460b      	mov	r3, r1
 800480c:	18db      	adds	r3, r3, r3
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
 8004810:	4613      	mov	r3, r2
 8004812:	eb42 0303 	adc.w	r3, r2, r3
 8004816:	657b      	str	r3, [r7, #84]	; 0x54
 8004818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800481c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004820:	f7fb fce0 	bl	80001e4 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <UART_SetConfig+0x2d4>)
 800482a:	fba3 2302 	umull	r2, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	011c      	lsls	r4, r3, #4
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800483c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	64b9      	str	r1, [r7, #72]	; 0x48
 800484c:	415b      	adcs	r3, r3
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004854:	4641      	mov	r1, r8
 8004856:	eb12 0a01 	adds.w	sl, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb43 0b01 	adc.w	fp, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800486c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004874:	4692      	mov	sl, r2
 8004876:	469b      	mov	fp, r3
 8004878:	4643      	mov	r3, r8
 800487a:	eb1a 0303 	adds.w	r3, sl, r3
 800487e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004882:	464b      	mov	r3, r9
 8004884:	eb4b 0303 	adc.w	r3, fp, r3
 8004888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004898:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800489c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048a0:	460b      	mov	r3, r1
 80048a2:	18db      	adds	r3, r3, r3
 80048a4:	643b      	str	r3, [r7, #64]	; 0x40
 80048a6:	4613      	mov	r3, r2
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
 80048ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048b6:	f7fb fc95 	bl	80001e4 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <UART_SetConfig+0x2d4>)
 80048c2:	fba3 2301 	umull	r2, r3, r3, r1
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2264      	movs	r2, #100	; 0x64
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	1acb      	subs	r3, r1, r3
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048d6:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <UART_SetConfig+0x2d4>)
 80048d8:	fba3 2302 	umull	r2, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e4:	441c      	add	r4, r3
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004900:	415b      	adcs	r3, r3
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004908:	4641      	mov	r1, r8
 800490a:	1851      	adds	r1, r2, r1
 800490c:	6339      	str	r1, [r7, #48]	; 0x30
 800490e:	4649      	mov	r1, r9
 8004910:	414b      	adcs	r3, r1
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004920:	4659      	mov	r1, fp
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4651      	mov	r1, sl
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4642      	mov	r2, r8
 8004936:	189b      	adds	r3, r3, r2
 8004938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800493c:	464b      	mov	r3, r9
 800493e:	460a      	mov	r2, r1
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004954:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800495c:	460b      	mov	r3, r1
 800495e:	18db      	adds	r3, r3, r3
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
 8004962:	4613      	mov	r3, r2
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004972:	f7fb fc37 	bl	80001e4 <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <UART_SetConfig+0x2d4>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	2164      	movs	r1, #100	; 0x64
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	3332      	adds	r3, #50	; 0x32
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <UART_SetConfig+0x2d4>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	f003 0207 	and.w	r2, r3, #7
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a4:	e105      	b.n	8004bb2 <UART_SetConfig+0x4d6>
 80049a6:	bf00      	nop
 80049a8:	40011000 	.word	0x40011000
 80049ac:	40011400 	.word	0x40011400
 80049b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	6239      	str	r1, [r7, #32]
 80049ce:	415b      	adcs	r3, r3
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d6:	4641      	mov	r1, r8
 80049d8:	1854      	adds	r4, r2, r1
 80049da:	4649      	mov	r1, r9
 80049dc:	eb43 0501 	adc.w	r5, r3, r1
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	00eb      	lsls	r3, r5, #3
 80049ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ee:	00e2      	lsls	r2, r4, #3
 80049f0:	4614      	mov	r4, r2
 80049f2:	461d      	mov	r5, r3
 80049f4:	4643      	mov	r3, r8
 80049f6:	18e3      	adds	r3, r4, r3
 80049f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049fc:	464b      	mov	r3, r9
 80049fe:	eb45 0303 	adc.w	r3, r5, r3
 8004a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a22:	4629      	mov	r1, r5
 8004a24:	008b      	lsls	r3, r1, #2
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	008a      	lsls	r2, r1, #2
 8004a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a34:	f7fb fbd6 	bl	80001e4 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4b60      	ldr	r3, [pc, #384]	; (8004bc0 <UART_SetConfig+0x4e4>)
 8004a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	011c      	lsls	r4, r3, #4
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	61b9      	str	r1, [r7, #24]
 8004a60:	415b      	adcs	r3, r3
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a68:	4641      	mov	r1, r8
 8004a6a:	1851      	adds	r1, r2, r1
 8004a6c:	6139      	str	r1, [r7, #16]
 8004a6e:	4649      	mov	r1, r9
 8004a70:	414b      	adcs	r3, r1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a80:	4659      	mov	r1, fp
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4642      	mov	r2, r8
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ab2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	008b      	lsls	r3, r1, #2
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aca:	4641      	mov	r1, r8
 8004acc:	008a      	lsls	r2, r1, #2
 8004ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ad2:	f7fb fb87 	bl	80001e4 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4b39      	ldr	r3, [pc, #228]	; (8004bc0 <UART_SetConfig+0x4e4>)
 8004adc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	2164      	movs	r1, #100	; 0x64
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	3332      	adds	r3, #50	; 0x32
 8004aee:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <UART_SetConfig+0x4e4>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afa:	441c      	add	r4, r3
 8004afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b00:	2200      	movs	r2, #0
 8004b02:	673b      	str	r3, [r7, #112]	; 0x70
 8004b04:	677a      	str	r2, [r7, #116]	; 0x74
 8004b06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b0a:	4642      	mov	r2, r8
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	1891      	adds	r1, r2, r2
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	415b      	adcs	r3, r3
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	1851      	adds	r1, r2, r1
 8004b1e:	6039      	str	r1, [r7, #0]
 8004b20:	4649      	mov	r1, r9
 8004b22:	414b      	adcs	r3, r1
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b32:	4659      	mov	r1, fp
 8004b34:	00cb      	lsls	r3, r1, #3
 8004b36:	4651      	mov	r1, sl
 8004b38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	00ca      	lsls	r2, r1, #3
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	4603      	mov	r3, r0
 8004b46:	4642      	mov	r2, r8
 8004b48:	189b      	adds	r3, r3, r2
 8004b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	460a      	mov	r2, r1
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b60:	667a      	str	r2, [r7, #100]	; 0x64
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b6e:	4649      	mov	r1, r9
 8004b70:	008b      	lsls	r3, r1, #2
 8004b72:	4641      	mov	r1, r8
 8004b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b78:	4641      	mov	r1, r8
 8004b7a:	008a      	lsls	r2, r1, #2
 8004b7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b80:	f7fb fb30 	bl	80001e4 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <UART_SetConfig+0x4e4>)
 8004b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2164      	movs	r1, #100	; 0x64
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	3332      	adds	r3, #50	; 0x32
 8004b9c:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <UART_SetConfig+0x4e4>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4422      	add	r2, r4
 8004bb0:	609a      	str	r2, [r3, #8]
}
 8004bb2:	bf00      	nop
 8004bb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bbe:	bf00      	nop
 8004bc0:	51eb851f 	.word	0x51eb851f

08004bc4 <atoi>:
 8004bc4:	220a      	movs	r2, #10
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f000 b8b4 	b.w	8004d34 <strtol>

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000010 	.word	0x20000010

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4d0d      	ldr	r5, [pc, #52]	; (8004c10 <__libc_init_array+0x38>)
 8004bdc:	4c0d      	ldr	r4, [pc, #52]	; (8004c14 <__libc_init_array+0x3c>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	2600      	movs	r6, #0
 8004be4:	42a6      	cmp	r6, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	4d0b      	ldr	r5, [pc, #44]	; (8004c18 <__libc_init_array+0x40>)
 8004bea:	4c0c      	ldr	r4, [pc, #48]	; (8004c1c <__libc_init_array+0x44>)
 8004bec:	f000 f8ac 	bl	8004d48 <_init>
 8004bf0:	1b64      	subs	r4, r4, r5
 8004bf2:	10a4      	asrs	r4, r4, #2
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	42a6      	cmp	r6, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c00:	4798      	blx	r3
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0a:	4798      	blx	r3
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	08004ef8 	.word	0x08004ef8
 8004c14:	08004ef8 	.word	0x08004ef8
 8004c18:	08004ef8 	.word	0x08004ef8
 8004c1c:	08004efc 	.word	0x08004efc

08004c20 <memset>:
 8004c20:	4402      	add	r2, r0
 8004c22:	4603      	mov	r3, r0
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memset+0xa>
 8004c28:	4770      	bx	lr
 8004c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2e:	e7f9      	b.n	8004c24 <memset+0x4>

08004c30 <_strtol_l.constprop.0>:
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c36:	d001      	beq.n	8004c3c <_strtol_l.constprop.0+0xc>
 8004c38:	2b24      	cmp	r3, #36	; 0x24
 8004c3a:	d906      	bls.n	8004c4a <_strtol_l.constprop.0+0x1a>
 8004c3c:	f7ff ffc6 	bl	8004bcc <__errno>
 8004c40:	2316      	movs	r3, #22
 8004c42:	6003      	str	r3, [r0, #0]
 8004c44:	2000      	movs	r0, #0
 8004c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004d30 <_strtol_l.constprop.0+0x100>
 8004c4e:	460d      	mov	r5, r1
 8004c50:	462e      	mov	r6, r5
 8004c52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004c5a:	f017 0708 	ands.w	r7, r7, #8
 8004c5e:	d1f7      	bne.n	8004c50 <_strtol_l.constprop.0+0x20>
 8004c60:	2c2d      	cmp	r4, #45	; 0x2d
 8004c62:	d132      	bne.n	8004cca <_strtol_l.constprop.0+0x9a>
 8004c64:	782c      	ldrb	r4, [r5, #0]
 8004c66:	2701      	movs	r7, #1
 8004c68:	1cb5      	adds	r5, r6, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d05b      	beq.n	8004d26 <_strtol_l.constprop.0+0xf6>
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d109      	bne.n	8004c86 <_strtol_l.constprop.0+0x56>
 8004c72:	2c30      	cmp	r4, #48	; 0x30
 8004c74:	d107      	bne.n	8004c86 <_strtol_l.constprop.0+0x56>
 8004c76:	782c      	ldrb	r4, [r5, #0]
 8004c78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c7c:	2c58      	cmp	r4, #88	; 0x58
 8004c7e:	d14d      	bne.n	8004d1c <_strtol_l.constprop.0+0xec>
 8004c80:	786c      	ldrb	r4, [r5, #1]
 8004c82:	2310      	movs	r3, #16
 8004c84:	3502      	adds	r5, #2
 8004c86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004c8e:	f04f 0c00 	mov.w	ip, #0
 8004c92:	fbb8 f9f3 	udiv	r9, r8, r3
 8004c96:	4666      	mov	r6, ip
 8004c98:	fb03 8a19 	mls	sl, r3, r9, r8
 8004c9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004ca0:	f1be 0f09 	cmp.w	lr, #9
 8004ca4:	d816      	bhi.n	8004cd4 <_strtol_l.constprop.0+0xa4>
 8004ca6:	4674      	mov	r4, lr
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	dd24      	ble.n	8004cf6 <_strtol_l.constprop.0+0xc6>
 8004cac:	f1bc 0f00 	cmp.w	ip, #0
 8004cb0:	db1e      	blt.n	8004cf0 <_strtol_l.constprop.0+0xc0>
 8004cb2:	45b1      	cmp	r9, r6
 8004cb4:	d31c      	bcc.n	8004cf0 <_strtol_l.constprop.0+0xc0>
 8004cb6:	d101      	bne.n	8004cbc <_strtol_l.constprop.0+0x8c>
 8004cb8:	45a2      	cmp	sl, r4
 8004cba:	db19      	blt.n	8004cf0 <_strtol_l.constprop.0+0xc0>
 8004cbc:	fb06 4603 	mla	r6, r6, r3, r4
 8004cc0:	f04f 0c01 	mov.w	ip, #1
 8004cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cc8:	e7e8      	b.n	8004c9c <_strtol_l.constprop.0+0x6c>
 8004cca:	2c2b      	cmp	r4, #43	; 0x2b
 8004ccc:	bf04      	itt	eq
 8004cce:	782c      	ldrbeq	r4, [r5, #0]
 8004cd0:	1cb5      	addeq	r5, r6, #2
 8004cd2:	e7ca      	b.n	8004c6a <_strtol_l.constprop.0+0x3a>
 8004cd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004cd8:	f1be 0f19 	cmp.w	lr, #25
 8004cdc:	d801      	bhi.n	8004ce2 <_strtol_l.constprop.0+0xb2>
 8004cde:	3c37      	subs	r4, #55	; 0x37
 8004ce0:	e7e2      	b.n	8004ca8 <_strtol_l.constprop.0+0x78>
 8004ce2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004ce6:	f1be 0f19 	cmp.w	lr, #25
 8004cea:	d804      	bhi.n	8004cf6 <_strtol_l.constprop.0+0xc6>
 8004cec:	3c57      	subs	r4, #87	; 0x57
 8004cee:	e7db      	b.n	8004ca8 <_strtol_l.constprop.0+0x78>
 8004cf0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004cf4:	e7e6      	b.n	8004cc4 <_strtol_l.constprop.0+0x94>
 8004cf6:	f1bc 0f00 	cmp.w	ip, #0
 8004cfa:	da05      	bge.n	8004d08 <_strtol_l.constprop.0+0xd8>
 8004cfc:	2322      	movs	r3, #34	; 0x22
 8004cfe:	6003      	str	r3, [r0, #0]
 8004d00:	4646      	mov	r6, r8
 8004d02:	b942      	cbnz	r2, 8004d16 <_strtol_l.constprop.0+0xe6>
 8004d04:	4630      	mov	r0, r6
 8004d06:	e79e      	b.n	8004c46 <_strtol_l.constprop.0+0x16>
 8004d08:	b107      	cbz	r7, 8004d0c <_strtol_l.constprop.0+0xdc>
 8004d0a:	4276      	negs	r6, r6
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d0f9      	beq.n	8004d04 <_strtol_l.constprop.0+0xd4>
 8004d10:	f1bc 0f00 	cmp.w	ip, #0
 8004d14:	d000      	beq.n	8004d18 <_strtol_l.constprop.0+0xe8>
 8004d16:	1e69      	subs	r1, r5, #1
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	e7f3      	b.n	8004d04 <_strtol_l.constprop.0+0xd4>
 8004d1c:	2430      	movs	r4, #48	; 0x30
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1b1      	bne.n	8004c86 <_strtol_l.constprop.0+0x56>
 8004d22:	2308      	movs	r3, #8
 8004d24:	e7af      	b.n	8004c86 <_strtol_l.constprop.0+0x56>
 8004d26:	2c30      	cmp	r4, #48	; 0x30
 8004d28:	d0a5      	beq.n	8004c76 <_strtol_l.constprop.0+0x46>
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	e7ab      	b.n	8004c86 <_strtol_l.constprop.0+0x56>
 8004d2e:	bf00      	nop
 8004d30:	08004ded 	.word	0x08004ded

08004d34 <strtol>:
 8004d34:	4613      	mov	r3, r2
 8004d36:	460a      	mov	r2, r1
 8004d38:	4601      	mov	r1, r0
 8004d3a:	4802      	ldr	r0, [pc, #8]	; (8004d44 <strtol+0x10>)
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f7ff bf77 	b.w	8004c30 <_strtol_l.constprop.0>
 8004d42:	bf00      	nop
 8004d44:	20000010 	.word	0x20000010

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
